package org.gkh.problems;

import java.util.ArrayList;
import java.util.List;

/**
 * Even Fibonacci numbers -- Problem 2.
 * <p>
 * Each new term in the Fibonacci sequence is
 * generated by adding the previous two terms. By starting with 1 and 2, the
 * first 10 terms will be:
 * <p>
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * <p>
 * By considering the terms in the Fibonacci sequence whose values do not exceed
 * four million, find the sum of the even-valued terms.
 * 
 * @author Garve Hays
 */
public class EvenFibonacciNumbers {

	public static final int DO_NOT_EXCEED = 4000000;
	
	private static List<Integer> fibNumbers = new ArrayList<Integer>();
	
	static {
		fibNumbers.add(0);
		fibNumbers.add(1);
	}
	
	/**
	 * @see <a
	 *      href="http://en.literateprograms.org/Fibonacci_numbers_(Java)">Fibonacci
	 *      numbers (Java)</a>
	 * @param n the nth term of the Fibonacci sequence
	 * @return the next term in the Fibonacci sequence
	 */
	static int computeNextTermRecursively(int n) {
		if (n >= fibNumbers.size()) {
			fibNumbers.add(n, computeNextTermRecursively(n - 1)
					+ (computeNextTermRecursively(n - 2)));
		}
		return fibNumbers.get(n);
	}
	
	public static void main(String[] args) {
		int count = 0;
		while (count <= 100) {
			System.out.println(computeNextTermRecursively(count));
			if (fibNumbers.get(count) >= DO_NOT_EXCEED) {
				break;
			}
			count++;
		}
		
		// No optimizations yet, and kind of winging it. We end up with the
		// final term exceeding 4,000,000 but since the value 5,702,887 is odd,
		// it will be dropped. Also the preceding term is 3,524,578.
		int sum = 0;
		for (int f : fibNumbers) {
			if (f % 2 == 0) {
				sum += f;
			}
		}
		System.out.println("The sum of all the even Fibonacci numbers less "
						+ "than 4,000,000 is ");
		System.out.println(sum);
	}
}
